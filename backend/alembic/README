Alembic Migrations for RelayPoint Backend
Overview
This directory contains the Alembic migration setup for RelayPoint, an AI-augmented, low-code workflow automation engine. Alembic manages database schema migrations for a single PostgreSQL database with the TimescaleDB extension, storing workflow configurations, connector metadata, and time-series audit trails. This setup supports RelayPoint’s core features: a visual workflow builder, AI workflow coach, enterprise-grade resilience, and observability.
Why It Matters for Investors:

Scalability: PostgreSQL with TimescaleDB handles high-throughput workloads, supporting enterprise-grade workflows and time-series data for observability (e.g., run logs).
Reliability: Alembic’s robust migration system ensures safe schema updates with rollback support, minimizing downtime in production environments like Kubernetes.
Compliance: Audit-ready schema versioning aligns with GDPR, HIPAA, and SOC 2 requirements, appealing to regulated industries like finance and healthcare.
Developer Productivity: Autogenerated migrations and clear documentation reduce technical debt, accelerating time-to-market for RelayPoint’s SaaS platform.

Database Configuration
RelayPoint uses a single PostgreSQL database with the TimescaleDB extension for efficient storage and querying of:

Workflows: Configurations for drag-and-drop workflows (e.g., Slack → Google Sheets → Jira).
Connectors: Metadata for community-driven connectors (e.g., Slack, Jira, Salesforce).
Audit Trails: Time-series data for workflow run logs, enabling observability and compliance.

Database Details

RDBMS: PostgreSQL (v15.x or later recommended)
Extension: TimescaleDB (for time-series audit trails)
Driver: asyncpg for async FastAPI integration, psycopg2 for Alembic migrations
Schema: Single database (relaypoint) with tables like workflows, connectors, and workflow_runs (hypertable)

Setup
Prerequisites

Python: 3.11+
Dependencies: Install via requirements.txt:pip install alembic sqlalchemy asyncpg psycopg2-binary timescaledb


PostgreSQL: Install and start PostgreSQL locally or use a managed service (e.g., AWS RDS).
TimescaleDB: Install the extension (see TimescaleDB docs).
Docker (optional): For local development with PostgreSQL and TimescaleDB.

Local Database Setup

Start PostgreSQL with TimescaleDB:docker run -d --name postgres -p 5432:5432 -e POSTGRES_USER=user -e POSTGRES_PASSWORD=password -e POSTGRES_DB=relaypoint timescale/timescaledb:latest-pg15


Verify TimescaleDB:psql -U user -d relaypoint -h localhost
relaypoint=# CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;



Alembic Configuration

Navigate to the Alembic directory:cd backend/alembic


Update alembic.ini with your database URL:[alembic]
sqlalchemy.url = postgresql://user:password@localhost:5432/relaypoint
environment = development
timescale_enabled = true


Ensure backend/models.py defines SQLAlchemy models (e.g., Workflow, Connector, WorkflowRun) and set target_metadata in `env.py

